#!/bin/bash -e

source $OPENSHIFT_CARTRIDGE_SDK_BASH

EXSERVER_BIN_DIR=${OPENSHIFT_EXSERVER_DIR}/bin

cartridge_type="exserver"
version=6.0

# Check if the server http port is up
function isdbup() {

    if [  "x${OPENSHIFT_MYSQL_DB_HOST}" = "x" ]; then
        echo "unable to locate the following env variable:  OPENSHIFT_MYSQL_DB_HOST"
        return 1
    fi

    let count=0
    while [ ${count} -lt 24 ]
    do
        if /usr/sbin/lsof -P -n -i "@${OPENSHIFT_MYSQL_DB_HOST}:${OPENSHIFT_MYSQL_DB_PORT}" | grep "(LISTEN)" > /dev/null; then
            echo "Found ${OPENSHIFT_MYSQL_DB_HOST}:${OPENSHIFT_MYSQL_DB_PORT} listening port"
            return 0
        fi
        let count=${count}+1

        sleep 2
    done

    return 1
}

function build() {
  echo "Building Execution Server"

}

function deploy() {
  echo "Deploying Execution Server"
  
}

function copy_conf() {
    mkdir ${OPENSHIFT_EXSERVER_DIR}/filtered
	# Create a link for each file in user config to server standalone/config
	if [ -d ${OPENSHIFT_REPO_DIR}.openshift/config ]
	then
	  for f in ${OPENSHIFT_REPO_DIR}.openshift/config/*
	  do
	    target=$(basename $f)
	    # Remove any target that is being overwritten
	    if [ -e "${OPENSHIFT_EXSERVER_DIR}/conf/$target" ]
	    then
	       echo "Removing existing $target"
	       rm -rf "${OPENSHIFT_EXSERVER_DIR}/conf/$target"
	       cp ${OPENSHIFT_REPO_DIR}.openshift/config/$target ${OPENSHIFT_EXSERVER_DIR}/conf
	    fi
	  done
	else
		cp ${OPENSHIFT_EXSERVER_DIR}/versions/${version}/conf/* ${OPENSHIFT_EXSERVER_DIR}/conf
	fi
	cp ${OPENSHIFT_EXSERVER_DIR}/versions/${version}/conf/* ${OPENSHIFT_EXSERVER_DIR}/filtered
}

function replace_envs() {
    for f in ${OPENSHIFT_EXSERVER_DIR}/filtered/*.*
    do
        sed -i -e "s/\${env.OPENSHIFT_EXSERVER_IP}/$OPENSHIFT_EXSERVER_IP/g" $f |
        sed -i -e "s/\${env.OPENSHIFT_MYSQL_DB_HOST}/$OPENSHIFT_MYSQL_DB_HOST/g" $f |
        sed -i -e "s/\${env.OPENSHIFT_MYSQL_DB_PORT}/$OPENSHIFT_MYSQL_DB_PORT/g" $f |
        sed -i -e "s/\${env.OPENSHIFT_MYSQL_DB_USERNAME}/$OPENSHIFT_MYSQL_DB_USERNAME/g" $f |
        sed -i -e "s/\${env.OPENSHIFT_MYSQL_DB_PASSWORD}/$OPENSHIFT_MYSQL_DB_PASSWORD/g" $f \
    done
}

function start() {

    # no point in deploying ex server is database is not up
    if ! isdbup; then
        echo "Timed out waiting for database listener port"
        exit 0
    fi 

    # 1) customize base jboss / bpms runtime by executing exserver cli
    copy_conf
    replace_envs
    #$OPENSHIFT_JBOSSEAP_DIR/bin/tools/jboss-cli.sh --connect --controller=$OPENSHIFT_JBOSSEAP_IP:$OPENSHIFT_JBOSSEAP_MANAGEMENT_NATIVE_PORT -c --file=$OPENSHIFT_EXSERVER_DIR/filtered/exserver-project.cli

  echo "Starting $cartridge_type cart"

  # JA Bride: link exserver web archive to jboss deployment directory if mysql database is up
  
}


function stop() {
  echo "Stopping $cartridge_type cart"

  # JA Bride:  rm soft link from exserver web archive to jboss deployment directory if exists
  
}

function restart() {
    echo "Restarting $cartridge_type cart"
   
  	stop
  	
  	start
}

function status() {
   if isrunning
   then
      echo "Application is running"
   else
      echo "Application is either stopped or inaccessible"
   fi
}

function reload() {
    echo "Reloading $cartridge_type cart"
    restart
}

# Clean up any log files
function tidy() {
  client_message "Emptying log dir: $OPENSHIFT_EXSERVER_LOG_DIR"
  shopt -s dotglob
  rm -rf $OPENSHIFT_EXSERVER_LOG_DIR/*
}

case "$1" in
    isdbup|build|deploy|start|stop|restart|status|reload|tidy|replace_envs)
        $1
        ;;
    *)

    echo $"Usage: $0 {isdbup|build|deploy|start|stop|restart|status|reload|tidy|replace_envs}"
    exit 1
esac


